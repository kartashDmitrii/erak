(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=5)})([function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"default",function(){return hideList});class hideList{constructor(listBlock){this.listBlock=listBlock;this.list=this.listBlock.querySelector("[data-block]");this.listBlock.querySelector("[data-btn]").addEventListener("click",()=>{this.showBlock()});if(this.list.classList.contains("active")){this.list.style.height=`${this.list.scrollHeight}px`}}showBlock(){let blockHeight=parseInt(window.getComputedStyle(this.list).getPropertyValue("height"));if(blockHeight===0){this.list.style.height=`${this.list.scrollHeight}px`;this.listBlock.querySelector("[data-btn]").classList.add("active")}else{this.listBlock.querySelector("[data-btn]").classList.remove("active");this.list.style.height=`0`}}}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"default",function(){return popupFunc});class popupFunc{constructor(button,popup){this.button=button;this.popup=popup;this.openPopupFunc=this.openPopup.bind(this);this.closePopupFunc=this.closePopup.bind(this);if(Array.isArray(this.button)){this.button.forEach(elem=>{elem.addEventListener("click",this.openPopupFunc)})}else{this.button.addEventListener("click",this.openPopupFunc)}this.popup.querySelectorAll(".close").forEach(elem=>elem.addEventListener("click",this.closePopupFunc));if(this.popup.parentNode.classList.contains("wrapper")){this.popup.parentNode.addEventListener("click",this.closePopupFunc)}}openPopup(event){if(event.target.dataset.stopEvent===undefined){this.popup.classList.add("active");if(this.popup.parentNode.classList.contains("wrapper")){this.popup.parentNode.classList.add("active")}if(window.screen.width<768){document.body.classList.add("hidden")}this.popup.querySelectorAll(".btn").forEach(elem=>{elem.querySelector("span").style.borderRight=`${elem.offsetWidth}px solid transparent`})}}closePopup(event){if(!event.target.classList.contains("close")&&event.target.closest(`.${this.button.dataset.popup}`)!==null){event.stopPropagation()}else{this.popup.classList.remove("active");if(this.popup.parentNode.classList.contains("wrapper")){this.popup.parentNode.classList.remove("active")}if(window.screen.width<768){document.body.classList.remove("hidden")}}}}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"default",function(){return horizontalScroll});class horizontalScroll{constructor(elem){this.elem=elem;if(this.elem.offsetWidth>this.elem.parentNode.offsetWidth){this.elem.classList.add("slider");this.oldXVal=0;this.newVal=0;this.moveFunc=this.mouseMove.bind(this);this.maxValue=this.elem.offsetWidth-this.elem.parentElement.offsetWidth;this.elem.style.setProperty("transition","all 200ms ease-out 0s");this.elem.addEventListener("mousedown",event=>{this.mouseDown(event)});this.elem.addEventListener("mouseup",event=>{this.mouseUp(event)});this.elem.addEventListener("mouseleave",event=>{this.mouseUp(event)});this.elem.addEventListener("touchstart",event=>{this.mouseDown(event)});this.elem.addEventListener("touchend",event=>{this.mouseUp(event)});this.elem.addEventListener("touchcancel",event=>{this.mouseUp(event)});const CONTAINER=this.elem.parentNode;const LINKS=CONTAINER.querySelectorAll("a");LINKS.forEach(el=>{let firstMouseX=0;el.addEventListener("mousedown",e=>{firstMouseX=e.clientX});el.addEventListener("click",e=>{let lastMouseX=e.clientX;let diffMouseX=firstMouseX-lastMouseX;if(diffMouseX>1||diffMouseX<-1){e.preventDefault()}})})}}mouseDown(event){this.elem.style.setProperty("cursor","grabbing");this.elem.style.setProperty("transition","all 0ms ease-out 0s");this.oldXVal=event.clientX!==undefined?event.clientX:event.touches[0].clientX;this.elem.addEventListener("mousemove",this.moveFunc);this.elem.addEventListener("touchmove",this.moveFunc,false)}mouseMove(event){let countVal=event.clientX!==undefined?event.clientX:event.touches[0].clientX;this.newVal-=this.oldXVal-countVal;this.elem.style.setProperty("transform",`translate3d(${this.newVal}px, 0px, 0px)`);this.oldXVal=countVal}mouseUp(event){this.elem.style.setProperty("transition","all 200ms ease-out 0s");if(this.newVal>0){this.newVal=0}if(this.newVal<`-${this.maxValue}`){this.newVal=`-${this.maxValue}`}this.elem.style.setProperty("transform",`translate3d(${this.newVal}px, 0px, 0px)`);this.elem.style.setProperty("cursor","grab");this.elem.removeEventListener("mousemove",this.moveFunc)}}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__.d(__webpack_exports__,"default",function(){return Tabs});class Tabs{constructor(btnArrow,tabArrow){this.btnArrow=btnArrow;this.tabArrow=tabArrow;this.btnArrow.forEach((elem,index)=>{elem.addEventListener("click",()=>this.switchTab(index))})}switchTab(index){this.btnArrow.forEach(btn=>{btn.classList.remove("active")});this.btnArrow[index].classList.add("active");this.tabArrow.forEach(tab=>{tab.classList.remove("active")});this.tabArrow[index].classList.add("active")}}},function(module,exports,__webpack_require__){(function(){"use strict";function polyfill(){var w=window;var d=document;if("scrollBehavior"in d.documentElement.style&&w.__forceSmoothScrollPolyfill__!==true){return}var Element=w.HTMLElement||w.Element;var SCROLL_TIME=468;var original={scroll:w.scroll||w.scrollTo,scrollBy:w.scrollBy,elementScroll:Element.prototype.scroll||scrollElement,scrollIntoView:Element.prototype.scrollIntoView};var now=w.performance&&w.performance.now?w.performance.now.bind(w.performance):Date.now;function isMicrosoftBrowser(userAgent){var userAgentPatterns=["MSIE ","Trident/","Edge/"];return new RegExp(userAgentPatterns.join("|")).test(userAgent)}var ROUNDING_TOLERANCE=isMicrosoftBrowser(w.navigator.userAgent)?1:0;function scrollElement(x,y){this.scrollLeft=x;this.scrollTop=y}function ease(k){return.5*(1-Math.cos(Math.PI*k))}function shouldBailOut(firstArg){if(firstArg===null||typeof firstArg!=="object"||firstArg.behavior===undefined||firstArg.behavior==="auto"||firstArg.behavior==="instant"){return true}if(typeof firstArg==="object"&&firstArg.behavior==="smooth"){return false}throw new TypeError("behavior member of ScrollOptions "+firstArg.behavior+" is not a valid value for enumeration ScrollBehavior.")}function hasScrollableSpace(el,axis){if(axis==="Y"){return el.clientHeight+ROUNDING_TOLERANCE<el.scrollHeight}if(axis==="X"){return el.clientWidth+ROUNDING_TOLERANCE<el.scrollWidth}}function canOverflow(el,axis){var overflowValue=w.getComputedStyle(el,null)["overflow"+axis];return overflowValue==="auto"||overflowValue==="scroll"}function isScrollable(el){var isScrollableY=hasScrollableSpace(el,"Y")&&canOverflow(el,"Y");var isScrollableX=hasScrollableSpace(el,"X")&&canOverflow(el,"X");return isScrollableY||isScrollableX}function findScrollableParent(el){while(el!==d.body&&isScrollable(el)===false){el=el.parentNode||el.host}return el}function step(context){var time=now();var value;var currentX;var currentY;var elapsed=(time-context.startTime)/SCROLL_TIME;elapsed=elapsed>1?1:elapsed;value=ease(elapsed);currentX=context.startX+(context.x-context.startX)*value;currentY=context.startY+(context.y-context.startY)*value;context.method.call(context.scrollable,currentX,currentY);if(currentX!==context.x||currentY!==context.y){w.requestAnimationFrame(step.bind(w,context))}}function smoothScroll(el,x,y){var scrollable;var startX;var startY;var method;var startTime=now();if(el===d.body){scrollable=w;startX=w.scrollX||w.pageXOffset;startY=w.scrollY||w.pageYOffset;method=original.scroll}else{scrollable=el;startX=el.scrollLeft;startY=el.scrollTop;method=scrollElement}step({scrollable:scrollable,method:method,startTime:startTime,startX:startX,startY:startY,x:x,y:y})}w.scroll=w.scrollTo=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])===true){original.scroll.call(w,arguments[0].left!==undefined?arguments[0].left:typeof arguments[0]!=="object"?arguments[0]:w.scrollX||w.pageXOffset,arguments[0].top!==undefined?arguments[0].top:arguments[1]!==undefined?arguments[1]:w.scrollY||w.pageYOffset);return}smoothScroll.call(w,d.body,arguments[0].left!==undefined?~~arguments[0].left:w.scrollX||w.pageXOffset,arguments[0].top!==undefined?~~arguments[0].top:w.scrollY||w.pageYOffset)};w.scrollBy=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])){original.scrollBy.call(w,arguments[0].left!==undefined?arguments[0].left:typeof arguments[0]!=="object"?arguments[0]:0,arguments[0].top!==undefined?arguments[0].top:arguments[1]!==undefined?arguments[1]:0);return}smoothScroll.call(w,d.body,~~arguments[0].left+(w.scrollX||w.pageXOffset),~~arguments[0].top+(w.scrollY||w.pageYOffset))};Element.prototype.scroll=Element.prototype.scrollTo=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])===true){if(typeof arguments[0]==="number"&&arguments[1]===undefined){throw new SyntaxError("Value could not be converted")}original.elementScroll.call(this,arguments[0].left!==undefined?~~arguments[0].left:typeof arguments[0]!=="object"?~~arguments[0]:this.scrollLeft,arguments[0].top!==undefined?~~arguments[0].top:arguments[1]!==undefined?~~arguments[1]:this.scrollTop);return}var left=arguments[0].left;var top=arguments[0].top;smoothScroll.call(this,this,typeof left==="undefined"?this.scrollLeft:~~left,typeof top==="undefined"?this.scrollTop:~~top)};Element.prototype.scrollBy=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])===true){original.elementScroll.call(this,arguments[0].left!==undefined?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,arguments[0].top!==undefined?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop);return}this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior})};Element.prototype.scrollIntoView=function(){if(shouldBailOut(arguments[0])===true){original.scrollIntoView.call(this,arguments[0]===undefined?true:arguments[0]);return}var scrollableParent=findScrollableParent(this);var parentRects=scrollableParent.getBoundingClientRect();var clientRects=this.getBoundingClientRect();if(scrollableParent!==d.body){smoothScroll.call(this,scrollableParent,scrollableParent.scrollLeft+clientRects.left-parentRects.left,scrollableParent.scrollTop+clientRects.top-parentRects.top);if(w.getComputedStyle(scrollableParent).position!=="fixed"){w.scrollBy({left:parentRects.left,top:parentRects.top,behavior:"smooth"})}}else{w.scrollBy({left:clientRects.left,top:clientRects.top,behavior:"smooth"})}}}if(true){module.exports={polyfill:polyfill}}else{}})()},function(module,exports,__webpack_require__){__webpack_require__(6);__webpack_require__(2);__webpack_require__(0);__webpack_require__(1);module.exports=__webpack_require__(3)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var _components_popupFunc__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);var _components_hideList__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(0);var _components_blockHorizontalScroll__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(2);var smoothscroll_polyfill__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4);var smoothscroll_polyfill__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(smoothscroll_polyfill__WEBPACK_IMPORTED_MODULE_3__);var _components_tabs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(3);smoothscroll_polyfill__WEBPACK_IMPORTED_MODULE_3___default.a.polyfill();function iOS(){return["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document}if(document.querySelector("section.product-info .image-block .slider")){let siema=new Siema({selector:document.querySelector("section.product-info .image-block .slider"),duration:400,easing:"ease-out",perPage:{0:1,577:6},startIndex:0,draggable:true,multipleDrag:true,threshold:20,loop:false,rtl:false,onInit:function(){setTimeout(()=>{this.preventLinkClick("section.product-info .image-block .slider div.video",function(e){e.preventDefault();e.stopPropagation();this.dataset.stopEvent="false";setTimeout(()=>delete this.dataset.stopEvent,50)})},50);this.preventLinkClick("section.product-info .image-block .slider div.image",function(e){this.dataset.stopEvent="false";setTimeout(()=>delete this.dataset.stopEvent,50)});this.selector.querySelectorAll(".image").forEach(elem=>{elem.addEventListener("click",function(){if(this.dataset.stopEvent===undefined){let image;if(this.dataset.image===undefined){image=this.querySelector("img").src}else{image=this.dataset.image}document.querySelector("section.product-info .image-block .current img").src=image}})})}})}if(document.querySelector('[data-slider="custom"]')){let slider=document.querySelector('[data-slider="custom"]');let siema=new Siema({selector:slider.querySelector(".wrapper"),duration:400,easing:"ease-out",perPage:{0:2,768:3,1200:4},startIndex:0,draggable:true,multipleDrag:true,threshold:20,loop:false,rtl:false,onInit:function(){setTimeout(()=>{this.preventLinkClick('[data-slider="custom"] a',e=>{e.preventDefault()})},50);let dotCount=Math.ceil(this.selector.querySelectorAll(".slide").length/this.perPage);for(let i=0;i<dotCount;i++){let dot=document.createElement("button");dot.classList.add("dot");slider.querySelector(".dots").appendChild(dot);dot.addEventListener("click",()=>{siema.goTo(i*siema.perPage)})}slider.querySelector(".dots").querySelectorAll(".dot")[Math.ceil(this.currentSlide/this.perPage)].classList.add("active");slider.querySelector(".btns .prev").addEventListener("click",()=>{siema.prev(this.perPage)});slider.querySelector(".btns .next").addEventListener("click",()=>{siema.next(this.perPage)})},onChange:function(){if(slider.querySelector(".dots").querySelector(".dot.active")){slider.querySelector(".dots").querySelector(".dot.active").classList.remove("active")}slider.querySelector(".dots").querySelectorAll(".dot")[Math.ceil(siema.currentSlide/siema.perPage)].classList.add("active")}})}document.querySelectorAll("header nav>ul li.has-child").forEach(elem=>{elem.addEventListener("click",function(event){event.stopPropagation();if(event.target.classList.contains("has-child")||event.target.parentNode.classList.contains("has-child")){elem.classList.toggle("active")}})});if(document.querySelector(".custom-select")){document.querySelectorAll(".custom-select").forEach(customSelectField=>{let originalSelectOptions=customSelectField.querySelectorAll("select option"),customSelect=document.createElement("div");customSelectField.querySelector("select").style.display="none";customSelect.classList.add("select");if(customSelectField.dataset.theme){customSelect.classList.add(customSelectField.dataset.theme)}let hideOptions=function(event){if(!event.target.closest(".custom-select")){customSelect.classList.remove("active");customOptions.classList.remove("active");document.removeEventListener("click",hideOptions)}};let customSelected=document.createElement("p");customSelected.classList.add("selected");customSelect.appendChild(customSelected);customSelected.addEventListener("click",()=>{if(customOptions.classList.contains("active")){customSelect.classList.remove("active");document.removeEventListener("click",hideOptions);customOptions.classList.remove("active")}else{customSelect.classList.add("active");customOptions.classList.add("active");setTimeout(()=>{document.addEventListener("click",hideOptions)})}});let customOptions=document.createElement("div");customOptions.classList.add("options");customSelect.appendChild(customOptions);originalSelectOptions.forEach((elem,index)=>{let customOption=document.createElement("p");customOption.classList.add("option");if(customSelect.classList.contains("mobile")){customOption.classList.add("close")}customOption.innerText=elem.innerText;customOptions.appendChild(customOption);if(elem.selected){customSelected.innerText=elem.innerText}customOption.addEventListener("click",event=>{customSelectField.querySelector("select").value=elem.value;customSelectField.querySelector("select").dispatchEvent(new Event("change"));elem.selected=true;customSelected.innerText=customOption.innerText;customSelect.classList.remove("active");customOptions.classList.remove("active")})});customSelectField.prepend(customSelect)})}if(document.querySelector(".aside .field")){document.querySelectorAll(".aside .field").forEach(elem=>{new _components_hideList__WEBPACK_IMPORTED_MODULE_1__["default"](elem)})}document.querySelectorAll("[data-popup]").forEach(elem=>{setTimeout(()=>{new _components_popupFunc__WEBPACK_IMPORTED_MODULE_0__["default"](elem,document.querySelector(`.${elem.dataset.popup}`))},50)});if(document.querySelector(".blog-links")){setTimeout(()=>new _components_blockHorizontalScroll__WEBPACK_IMPORTED_MODULE_2__["default"](document.querySelector(".blog-links")),100)}if(document.querySelector("[data-href]")){function SmoothVerticalScrolling(e){let eTop;if(iOS()){eTop=e.offsetTop}else{eTop=e.getBoundingClientRect().top}console.log(eTop);window.scrollTo({top:eTop-50,behavior:"smooth"})}document.querySelectorAll("[data-href]").forEach(link=>{link.addEventListener("click",()=>{SmoothVerticalScrolling(document.querySelector(`${link.dataset.href}`))})})}if(document.querySelector("section.product-tabs")){new _components_tabs__WEBPACK_IMPORTED_MODULE_4__["default"](document.querySelectorAll("section.product-tabs .tab-links .btn"),document.querySelectorAll("section.product-tabs .tabs .tab"))}if(document.querySelector("section.product-info .image-block .slider .video")){setTimeout(()=>{document.querySelectorAll("section.product-info .image-block .slider .video").forEach(elem=>{elem.addEventListener("click",function(){console.log(elem.dataset.stopEvent);if(elem.dataset.stopEvent===undefined){if(!(document.querySelector(".video-popup iframe").src===this.dataset.src)){document.querySelector(".video-popup iframe").src=this.dataset.src}}})});document.querySelectorAll(".video-popup .close").forEach(closeElem=>{closeElem.addEventListener("click",()=>{console.log(1);delete document.querySelector(".video-popup iframe").src})});document.querySelector(".video-popup").parentNode.addEventListener("click",()=>{document.querySelector(".video-popup iframe").removeAttribute("src")})},50)}document.querySelectorAll("section.questions .question").forEach(elem=>{new _components_hideList__WEBPACK_IMPORTED_MODULE_1__["default"](elem)});if(document.querySelector(".btn")){setTimeout(()=>{document.querySelectorAll(".btn").forEach(elem=>{elem.querySelector("span").style.borderRight=`${elem.offsetWidth}px solid transparent`})},50)}if(document.querySelector(".section-title")){setTimeout(()=>{document.querySelectorAll(".section-title").forEach(elem=>{elem.querySelector("span").style.borderRight=`${elem.offsetWidth+10}px solid transparent`})},50)}window.addEventListener("resize",function(){if(document.querySelector(".btn")){setTimeout(()=>{document.querySelectorAll(".btn").forEach(elem=>{elem.querySelector("span").style.borderRight=`${elem.offsetWidth}px solid transparent`})},50)}if(document.querySelector(".section-title")){setTimeout(()=>{document.querySelectorAll(".section-title").forEach(elem=>{elem.querySelector("span").style.borderRight=`${elem.offsetWidth+10}px solid transparent`})},50)}})}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
